name: Auto Code Generation and Deploy

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  auto-generate-and-deploy:
    runs-on: ubuntu-latest
    name: Auto Generate Code and Deploy
    if: |
      contains(github.event.issue.title, '@claude') && (
        contains(github.event.issue.labels.*.name, 'auto-deploy') ||
        contains(github.event.issue.labels.*.name, 'line-bot') ||
        contains(github.event.issue.body, 'フォーム') ||
        contains(github.event.issue.body, '作成')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install @anthropic-ai/sdk

      - name: Generate code with Claude
        id: generate-code
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const Anthropic = require('@anthropic-ai/sdk');
            const fs = require('fs');

            const issueTitle = context.payload.issue.title;
            const issueBody = context.payload.issue.body;
            const issueNumber = context.payload.issue.number;

            console.log('🔍 処理開始:', issueTitle);

            const anthropic = new Anthropic({
              apiKey: process.env.ANTHROPIC_API_KEY,
            });

            try {
              console.log('🤖 Claude APIを呼び出し中...');

              const message = await anthropic.messages.create({
                model: 'claude-sonnet-4-20250514',
                max_tokens: 4000,
                temperature: 0.3,
                messages: [{
                  role: 'user',
                  content: `お問い合わせフォームのHTMLページを作成してください。

                  要件:
                  - 完全に動作するHTML/CSS/JavaScript
                  - レスポンシブデザイン
                  - バリデーション機能
                  - モダンなデザイン
                  - 1つのHTMLファイルに全て含める

                  以下の形式で返答してください:

                  \`\`\`html
                  [完全なHTMLコード]
                  \`\`\``
                }]
              });

              const generatedContent = message.content[0].text;
              console.log('✅ コード生成完了');

              // HTMLコードを抽出
              const htmlMatch = generatedContent.match(/```html\n([\s\S]*?)```/);

              let htmlCode;
              if (htmlMatch) {
                htmlCode = htmlMatch[1];
                console.log('✅ HTMLコード抽出成功');
              } else {
                // フォールバック HTML - 外部ファイルから読み込み
                htmlCode = fs.readFileSync('contact-form.html', 'utf8');
                console.log('✅ フォールバックHTML使用');
              }

              // ファイル作成
              fs.writeFileSync('index.html', htmlCode);
              console.log('✅ index.html作成完了');

              // README作成
              const readmeContent = [
                '# 🌐 お問い合わせフォーム',
                '',
                'この美しいお問い合わせフォームはClaude API によって自動生成されました。',
                '',
                '## 🚀 アクセス方法',
                `**📱 フォームURL:** https://${context.repo.owner}.github.io/${context.repo.repo}/`,
                '',
                '## ✨ 機能',
                '- レスポンシブデザイン',
                '- バリデーション機能',
                '- モダンUI/UX',
                '- 送信確認機能',
                '',
                '## 📝 生成情報',
                `- 生成日時: ${new Date().toISOString()}`,
                `- Issue: #${issueNumber}`,
                '- モデル: Claude Sonnet 4',
                '',
                '---',
                '*🤖 Claude Code Action による自動生成*'
              ].join('\n');

              fs.writeFileSync('README.md', readmeContent);
              console.log('✅ README.md作成完了');

              core.setOutput('issue_number', issueNumber);
              return 'success';

            } catch (error) {
              console.log('❌ エラー:', error.message);

              // エラー時もフォールバックHTMLを作成
              try {
                const fallbackHtml = fs.readFileSync('contact-form.html', 'utf8');
                fs.writeFileSync('index.html', fallbackHtml);
                console.log('✅ フォールバックindex.html作成');
              } catch (fileError) {
                // 最終フォールバック
                const basicHtml = [
                  '<!DOCTYPE html>',
                  '<html lang="ja">',
                  '<head>',
                  '<meta charset="UTF-8">',
                  '<title>お問い合わせフォーム</title>',
                  '<style>body{font-family:Arial,sans-serif;max-width:600px;margin:50px auto;padding:20px}input,textarea{width:100%;padding:10px;margin:10px 0;border:1px solid #ddd}</style>',
                  '</head>',
                  '<body>',
                  '<h1>お問い合わせフォーム</h1>',
                  '<form><input type="text" placeholder="お名前" required><input type="email" placeholder="メール" required><textarea placeholder="メッセージ" required></textarea><button type="submit">送信</button></form>',
                  '</body>',
                  '</html>'
                ].join('\n');

                fs.writeFileSync('index.html', basicHtml);
                console.log('✅ 基本HTMLフォールバック作成');
              }

              fs.writeFileSync('README.md', '# フォールバック用お問い合わせフォーム\n\nClaude APIエラー時のフォールバック');

              core.setOutput('issue_number', issueNumber);
              return 'fallback';
            }

      - name: Create branch and commit
        run: |
          BRANCH_NAME="contact-form-issue-${{ steps.generate-code.outputs.issue_number }}"
          echo "🌿 Creating branch: $BRANCH_NAME"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git checkout -b $BRANCH_NAME

          git add -A
          git commit -m "🤖 Auto-generated contact form for issue #${{ steps.generate-code.outputs.issue_number }}"
          git push origin $BRANCH_NAME

          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request and Auto-merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ steps.generate-code.outputs.issue_number }};
            const branchName = process.env.BRANCH_NAME;

            try {
              // プルリクエスト作成
              console.log('🔄 Creating pull request...');
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🤖 お問い合わせフォーム for issue #${issueNumber}`,
                head: branchName,
                base: 'master',
                body: [
                  '## 🌐 お問い合わせフォーム自動生成',
                  '',
                  `このPRはIssue #${issueNumber}に基づいてClaude APIで自動生成されました。`,
                  '',
                  '### 📁 生成ファイル',
                  '- **index.html**: メインのお問い合わせフォーム',
                  '- **README.md**: ドキュメント',
                  '',
                  '### 🚀 デプロイ後のアクセス方法',
                  `**📱 フォームURL:** https://${context.repo.owner}.github.io/${context.repo.repo}/`,
                  '',
                  `Closes #${issueNumber}`
                ].join('\n')
              });

              console.log(`✅ Pull Request #${pr.number} created`);

              // 少し待ってからマージ
              await new Promise(resolve => setTimeout(resolve, 2000));

              // 自動マージ実行
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                commit_title: `🚀 Deploy contact form #${issueNumber}`,
                merge_method: 'squash'
              });

              console.log(`✅ Auto-merged PR #${pr.number}`);

              // GitHub Pages設定
              try {
                await github.rest.repos.createPagesSite({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  source: { branch: 'master', path: '/' }
                });
                console.log('✅ GitHub Pages enabled');
              } catch (error) {
                console.log('📝 GitHub Pages already configured');
              }

              // 完了通知
              const completionMessage = [
                '## 🎉 お問い合わせフォーム デプロイ完了！',
                '',
                '**✅ 自動処理が完了しました:**',
                '',
                '### 🌐 アクセス方法',
                `**📱 お問い合わせフォーム:** https://${context.repo.owner}.github.io/${context.repo.repo}/`,
                '',
                '### 📋 実装済み機能',
                '- 📱 レスポンシブデザイン',
                '- ✅ バリデーション機能',
                '- 🎨 モダンUI/UX',
                '- 📧 送信確認機能',
                '',
                '### ⚡ 処理詳細',
                '1. Claude Sonnet 4でコード生成',
                `2. プルリクエスト #${pr.number} 作成・マージ`,
                '3. GitHub Pagesにデプロイ',
                '',
                '数分後にアクセス可能になります！',
                '',
                '---',
                '*🤖 LINE Bot → Claude API → GitHub Actions による完全自動処理*'
              ].join('\n');

              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: completionMessage
              });

              // Issue をクローズ
              await github.rest.issues.update({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed'
              });

              console.log(`✅ Issue #${issueNumber} closed`);

            } catch (error) {
              console.log('❌ Error in PR/merge process:', error.message);

              // エラー時の通知
              const errorMessage = [
                '## ⚠️ 処理中にエラーが発生',
                '',
                'フォームは生成されましたが、マージ処理でエラーが発生しました。',
                '手動でプルリクエストを確認してください。',
                '',
                `**エラー:** ${error.message}`,
                '',
                '---',
                '*Claude Code Action*'
              ].join('\n');

              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: errorMessage
              });
            }

  deploy-to-pages:
    runs-on: ubuntu-latest
    name: Deploy to GitHub Pages
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: Upload artifacts
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
