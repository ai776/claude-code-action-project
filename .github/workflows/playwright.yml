name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  issue_comment:
    types: [created]

# 明示的な権限設定を追加
permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test:
    if: github.event_name != 'issue_comment' || contains(github.event.comment.body, '@playwright')
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: npx playwright test --reporter=list,json,html
      env:
        CI: true

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Comment on PR with test results
      if: github.event_name == 'pull_request' && !cancelled()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');

          let comment = '## 🎭 Playwright Test Results\n\n';

          try {
            // Read test results
            const resultsPath = 'playwright-report/results.json';
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              const { stats } = results;

              comment += `### 📊 Test Summary\n`;
              comment += `- **Total Tests**: ${stats.total}\n`;
              comment += `- **✅ Passed**: ${stats.passed}\n`;
              comment += `- **❌ Failed**: ${stats.failed}\n`;
              comment += `- **⏭️ Skipped**: ${stats.skipped}\n`;
              comment += `- **⏱️ Duration**: ${Math.round(stats.duration / 1000)}s\n\n`;

              if (stats.failed > 0) {
                comment += `### ❌ Failed Tests\n`;
                results.suites.forEach(suite => {
                  suite.specs.forEach(spec => {
                    spec.tests.forEach(test => {
                      if (test.results.some(r => r.status === 'failed')) {
                        comment += `- **${spec.title}**: ${test.title}\n`;
                      }
                    });
                  });
                });
                comment += '\n';
              }

              comment += `### 🎯 Browser Coverage\n`;
              comment += `Tests ran on: Chromium, Firefox, WebKit, Mobile Chrome, Mobile Safari\n\n`;

              if (stats.passed === stats.total - stats.skipped) {
                comment += `### 🎉 All tests passed!\n`;
                comment += `Your code is ready for production! 🚀\n\n`;
              }

            } else {
              comment += '⚠️ Test results not found\n\n';
            }
          } catch (error) {
            comment += `⚠️ Error reading test results: ${error.message}\n\n`;
          }

          comment += `### 📋 Playwright Report\n`;
          comment += `View the detailed HTML report in the [Actions artifacts](${context.payload.pull_request.html_url}/checks).\n\n`;
          comment += `---\n`;
          comment += `🤖 *Automated by Claude Code Action - Playwright*`;

          try {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            console.log('✅ Comment posted successfully');
          } catch (error) {
            console.log('⚠️ Failed to post comment:', error.message);
            console.log('📊 Test results:', comment);
          }

  claude-playwright-assistant:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@playwright')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install dependencies
      run: npm ci

    - name: Claude Playwright Assistant
      uses: actions/github-script@v7
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const comment = context.payload.comment.body;
          const issueNumber = context.issue.number;

          let response = '## 🎭 Claude Playwright Assistant\n\n';

          if (comment.includes('@playwright help')) {
            response += `### 🚀 Available Commands\n\n`;
            response += `- \`@playwright help\` - Show this help message\n`;
            response += `- \`@playwright test\` - Run all Playwright tests\n`;
            response += `- \`@playwright generate <url>\` - Generate tests for a URL\n`;
            response += `- \`@playwright debug\` - Run tests in debug mode\n`;
            response += `- \`@playwright report\` - Show latest test report\n\n`;
            response += `### 📚 Playwright Resources\n`;
            response += `- [Playwright Documentation](https://playwright.dev/docs/intro)\n`;
            response += `- [Best Practices](https://playwright.dev/docs/best-practices)\n`;
            response += `- [API Reference](https://playwright.dev/docs/api/class-playwright)\n\n`;
          } else if (comment.includes('@playwright test')) {
            response += `### 🧪 Running Playwright Tests\n\n`;
            response += `Tests are being executed across all browsers:\n`;
            response += `- 🌐 **Chromium** (Desktop Chrome)\n`;
            response += `- 🦊 **Firefox** (Desktop Firefox)\n`;
            response += `- 🧭 **WebKit** (Desktop Safari)\n`;
            response += `- 📱 **Mobile Chrome** (Pixel 5)\n`;
            response += `- 📱 **Mobile Safari** (iPhone 12)\n\n`;
            response += `Check the Actions tab for detailed results! 🎯\n\n`;
          } else if (comment.includes('@playwright generate')) {
            const urlMatch = comment.match(/generate\s+(https?:\/\/[^\s]+)/);
            const url = urlMatch ? urlMatch[1] : 'https://example.com';

            response += `### 🔧 Test Generation for: ${url}\n\n`;
            response += `Here's a sample test structure:\n\n`;
            response += `\`\`\`javascript\n`;
            response += `const { test, expect } = require('@playwright/test');\n\n`;
            response += `test.describe('${url} Tests', () => {\n`;
            response += `  test('page loads correctly', async ({ page }) => {\n`;
            response += `    await page.goto('${url}');\n`;
            response += `    await expect(page).toHaveTitle(/.+/);\n`;
            response += `  });\n\n`;
            response += `  test('main navigation works', async ({ page }) => {\n`;
            response += `    await page.goto('${url}');\n`;
            response += `    // Add your specific test logic here\n`;
            response += `  });\n`;
            response += `});\n`;
            response += `\`\`\`\n\n`;
          } else {
            response += `### 💡 Playwright Analysis\n\n`;
            response += `I can help you with:\n`;
            response += `- 🧪 **Test Creation**: Generate comprehensive test suites\n`;
            response += `- 🐛 **Debugging**: Analyze test failures and suggest fixes\n`;
            response += `- 🎯 **Optimization**: Improve test performance and reliability\n`;
            response += `- 📊 **Reporting**: Interpret test results and coverage\n\n`;
            response += `Use \`@playwright help\` for available commands!\n\n`;
          }

          response += `---\n🤖 *Claude Playwright Assistant - Powered by AI*`;

          try {
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: response
            });
            console.log('✅ Claude Playwright Assistant comment posted successfully');
          } catch (error) {
            console.log('⚠️ Failed to post Claude comment:', error.message);
            console.log('📝 Response content:', response);
          }
